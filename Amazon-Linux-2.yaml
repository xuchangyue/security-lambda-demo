# Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
AWSTemplateFormatVersion: 2010-09-09

Description:  "Force to use authorized ami"

####
#### CloudFormation Metadata - makes the parameter inputs look nice
####
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Lambda Settings
      Parameters:
      - pLambdaFunctionsS3BucketName
      - pLambdaFunctionS3keyPath
    ParameterLabels:
      pLambdaFunctionsS3BucketName:
        default: S3 Bucket with Lambda Function Zip files
      pLambdaFunctionS3keyPath:
        default: Path in the S3 Bucket to the Lambda Function zip file.
      pChimeHookUrl:
        default: Chime hook url
      pRequiredAmiId:
        default: authorized ami id
      pUserLogin:
        default: notify Chime user login 

Parameters:
  pLambdaFunctionsS3BucketName:
    Type: String
    Description: The name of the bucket used to store the lambda functions
  pLambdaFunctionS3keyPath:
    Type: String
    Description: Path to the Lambda Function zip file.
  pChimeHookUrl:
    Type: String
    Description: Chime hook url
  pRequiredAmiId:
    Type: String
    Description: authorized ami id
  pUserLogin:
    Type: String
    Description: notify Chime user login 


Resources:

  rCloudWatchEvent: #CloudWatch Event Rule to trigger the Lambda Function
    Type: AWS::Events::Rule
    DependsOn: rLambdaFunction
    Properties:
      EventPattern:
            source:
              - aws.ec2
            detail:
              eventSource:
                - ec2.amazonaws.com
              eventName:
                - RunInstances
      Name: !Sub ${AWS::StackName}-${AWS::Region}-Run-Instances-CW-Event
      Targets:
      - Arn: !GetAtt 'rLambdaFunction.Arn'
        Id: rLambdaFunction

  rCloudWatchEventLambdaPermission: #Allows CloudWatch Event to Invoke the rLambdaFunction function
    Type: AWS::Lambda::Permission
    DependsOn: rLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'rLambdaFunction.Arn'
      Principal: events.amazonaws.com

  rLambdaRole: #Lambda Execution Role and Permissions
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-Authorize-AMI-LambdaRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-Authorize-AMI-LambdaPolicy'
        PolicyDocument:
          Statement:
          - Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: "arn:aws:logs:*:*:*"
            Sid: CloudWatchLogsPermissions
          - Action:
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
            Effect: Allow
            Resource:
              - !Sub "arn:aws:s3:::${pLambdaFunctionsS3BucketName}*"
              - !Sub "arn:aws:s3:::${pLambdaFunctionsS3BucketName}*/*"
            Sid: S3BucketPermissions
          - Action:
              - 'ec2:TerminateInstances'
            Effect: Allow
            Resource: "*"
            Sid: TerminateInstances


  rLambdaFunction: #Lambda Function Creation and Code
    Type: AWS::Lambda::Function
    DependsOn: rLambdaRole
    Properties:
      FunctionName: !Sub '${AWS::StackName}-${AWS::Region}-Authorize-AMI-LambdaFunction'
      Role: !GetAtt rLambdaRole.Arn
      Description: Checking for instances if using authorized AMI
      Environment:
        Variables:
          chime_hook_url: !Ref pChimeHookUrl
          region: !Sub ${AWS::Region}
          required_ami_id: !Ref pRequiredAmiId
          user_login: !Ref pUserLogin
      Handler: index.lambda_handler
      Timeout: 60
      Runtime: python3.8
      Tags:
      - Key: Name
        Value: !Sub Lambda Security Control - ${AWS::StackName}
      Code:
        S3Bucket: !Ref pLambdaFunctionsS3BucketName
        S3Key: !Ref pLambdaFunctionS3keyPath

Outputs:
  oLambdaFunctionARN:
    Description: Lambda Function ARN
    Value: !GetAtt rLambdaFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaARN
